<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CommandTimeoutLessZero" xml:space="preserve">
    <value>CommandTimeout不能为负值。</value>
  </data>
  <data name="SetConnectionInTransaction" xml:space="preserve">
    <value>事务提交前，无法改变连接属性。</value>
  </data>
  <data name="SetTransactionInTransaction" xml:space="preserve">
    <value>事务提交前，无法改变事务属性。</value>
  </data>
  <data name="CommandTypeTableDirect" xml:space="preserve">
    <value>只支持Text和StoredProcedure类型。</value>
  </data>
  <data name="BackendErrors" xml:space="preserve">
    <value>服务端发来错误报告。</value>
  </data>
  <data name="MediatorErrors" xml:space="preserve">
    <value> {0}() 处出错:</value>
  </data>
  <data name="MediatorErrors_1P" xml:space="preserve">
    <value> {0}({1}) 处出错:</value>
  </data>
  <data name="ConnectionNull" xml:space="preserve">
    <value>连接尚未设定。</value>
  </data>
  <data name="ConnectionNotOpen" xml:space="preserve">
    <value>连接未打开。</value>
  </data>
  <data name="ParamNotInQuery" xml:space="preserve">
    <value>参数 {0} 没有出现在查询中。</value>
  </data>
  <data name="ConnectionBroken" xml:space="preserve">
    <value>连接已中断。</value>
  </data>
  <data name="InvalidFunctionName" xml:space="preserve">
    <value>pg_proc 中不存在 {0}</value>
  </data>
  <data name="ConnectionStringDescription" xml:space="preserve">
    <value>用于连接PostgreSQL数据库的信息，例: 'Server=X;Port=X;Database=X;User Id=X;Password=X;'</value>
  </data>
  <data name="ConnectionTimeoutDescription" xml:space="preserve">
    <value>连接等待超时值，连接字符串中为'Connect Timeout=X'</value>
  </data>
  <data name="DatabaseDescription" xml:space="preserve">
    <value>所连接的PostgreSQL数据库，连接字符串中为'Database=X'</value>
  </data>
  <data name="NoNestedTransactions" xml:space="preserve">
    <value>不支持嵌套/并发事务。</value>
  </data>
  <data name="InvalidDbName" xml:space="preserve">
    <value>错误的数据库名: {0}</value>
  </data>
  <data name="MissingConnStrArg" xml:space="preserve">
    <value>连接字符串中有遗漏的参数!</value>
  </data>
  <data name="ConnOpen" xml:space="preserve">
    <value>连接已经是打开状态了</value>
  </data>
  <data name="ConnNotOpen" xml:space="preserve">
    <value>连接未打开</value>
  </data>
  <data name="ConnStrEmpty" xml:space="preserve">
    <value>连接字符串不能为空。</value>
  </data>
  <data name="SocketEx" xml:space="preserve">
    <value>有SocketException异常</value>
  </data>
  <data name="OpenError" xml:space="preserve">
    <value>Open()时发生错误</value>
  </data>
  <data name="CloseError" xml:space="preserve">
    <value>Close()时发生错误</value>
  </data>
  <data name="WrongKeyVal" xml:space="preserve">
    <value>ConnectionString中的 key=value 参数不正确</value>
  </data>
  <data name="InvalidBooleanKeyVal" xml:space="preserve">
    <value>期望 ConnectionString 中的 {0}=[True/False]</value>
  </data>
  <data name="InvalidIntegerKeyVal" xml:space="preserve">
    <value>期望 ConnectionString 中的 {0}=[Numeric]</value>
  </data>
  <data name="IntegerKeyValMax" xml:space="preserve">
    <value>ConnectionString 中的数值 {0} 超过了最大值 {1}</value>
  </data>
  <data name="IntegerKeyValMin" xml:space="preserve">
    <value>ConnectionString 中的数值 {0} 低于最大值 {1}</value>
  </data>
  <data name="InvalidProtocolVersionKeyVal" xml:space="preserve">
    <value>期望 ConnectionString 中的 {0}=[Protocol Version]</value>
  </data>
</root>
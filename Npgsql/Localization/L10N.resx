<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CommandTimeoutLessZero" xml:space="preserve">
    <value>CommandTimeout can't be less than zero.</value>
  </data>
  <data name="SetConnectionInTransaction" xml:space="preserve">
    <value>The Connection property can't be changed with an uncommited transaction.</value>
  </data>
  <data name="SetTransactionInTransaction" xml:space="preserve">
    <value>The Transaction property can't be changed with an uncommited transaction.</value>
  </data>
  <data name="CommandTypeTableDirect" xml:space="preserve">
    <value>Only Text and StoredProcedure types supported!</value>
  </data>
  <data name="BackendErrors" xml:space="preserve">
    <value>There have been errors reported by the backend.</value>
  </data>
  <data name="MediatorErrors" xml:space="preserve">
    <value>There have been errors on {0}():</value>
  </data>
  <data name="MediatorErrors_1P" xml:space="preserve">
    <value>There have been errors on {0}({1}):</value>
  </data>
  <data name="ConnectionNull" xml:space="preserve">
    <value>The Connection is not set.</value>
  </data>
  <data name="ConnectionNotOpen" xml:space="preserve">
    <value>The Connection is not open.</value>
  </data>
  <data name="ParamNotInQuery" xml:space="preserve">
    <value>Parameter {0} not found in query.</value>
  </data>
  <data name="ConnectionBroken" xml:space="preserve">
    <value>The Connection is broken.</value>
  </data>
  <data name="InvalidFunctionName" xml:space="preserve">
    <value>{0} does not exist in pg_proc</value>
  </data>
  <data name="ConnectionStringDescription" xml:space="preserve">
    <value>Information used to connect to a PostgreSQL Database, such as 'Server=X;Port=X;Database=X;User Id=X;Password=X;'</value>
  </data>
  <data name="ConnectionTimeoutDescription" xml:space="preserve">
    <value>Current connection timeout value, 'Connect Timeout=X' in the connection string</value>
  </data>
  <data name="DatabaseDescription" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="NoNestedTransactions" xml:space="preserve">
    <value>Nested/Concurrent transactions aren't supported.</value>
  </data>
  <data name="InvalidDbName" xml:space="preserve">
    <value>Invalid database name: {0}</value>
  </data>
  <data name="MissingConnStrArg" xml:space="preserve">
    <value>Connection string argument missing!</value>
  </data>
  <data name="ConnOpen" xml:space="preserve">
    <value>Connection already open</value>
  </data>
  <data name="ConnNotOpen" xml:space="preserve">
    <value>Connection is not open</value>
  </data>
  <data name="ConnStrEmpty" xml:space="preserve">
    <value>ConnectionString cannot be empty.</value>
  </data>
  <data name="SocketEx" xml:space="preserve">
    <value>A SocketException occured</value>
  </data>
  <data name="OpenError" xml:space="preserve">
    <value>There have been errors on Open()</value>
  </data>
  <data name="CloseError" xml:space="preserve">
    <value>Error in Close()</value>
  </data>
  <data name="WrongKeyVal" xml:space="preserve">
    <value>key=value argument incorrect in ConnectionString</value>
  </data>
  <data name="InvalidBooleanKeyVal" xml:space="preserve">
    <value>expecting {0}=[True/False] value in ConnectionString</value>
  </data>
  <data name="InvalidIntegerKeyVal" xml:space="preserve">
    <value>expecting {0}=[Numeric] value in ConnectionString</value>
  </data>
  <data name="IntegerKeyValMax" xml:space="preserve">
    <value>numeric value {0} in ConnectionString exceeds maximum value {1}</value>
  </data>
  <data name="IntegerKeyValMin" xml:space="preserve">
    <value>numeric value {0} in ConnectionString is below minimum value {1}</value>
  </data>
  <data name="InvalidProtocolVersionKeyVal" xml:space="preserve">
    <value>expecting {0}=[Protocol Version] value in ConnectionString</value>
  </data>
  <data name="DataCategory_Advanced" xml:space="preserve">
    <value>Advanced</value>
  </data>
  <data name="DataCategory_Context" xml:space="preserve">
    <value>Context</value>
  </data>
  <data name="DataCategory_Initialization" xml:space="preserve">
    <value>Initialization</value>
  </data>
  <data name="DataCategory_Pooling" xml:space="preserve">
    <value>Pooling</value>
  </data>
  <data name="DataCategory_Security" xml:space="preserve">
    <value>Security</value>
  </data>
  <data name="DataCategory_Source" xml:space="preserve">
    <value>Data Source</value>
  </data>
  <data name="HostDescription" xml:space="preserve">
    <value>Host</value>
  </data>
  <data name="Host" xml:space="preserve">
    <value>Host</value>
  </data>
  <data name="PortDescription" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="Port" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="ProtocolDescription" xml:space="preserve">
    <value>Protocol Version</value>
  </data>
  <data name="Protocol" xml:space="preserve">
    <value>Protocol Version</value>
  </data>
  <data name="Database" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="UserNameDescription" xml:space="preserve">
    <value>Username</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>Username</value>
  </data>
  <data name="PasswordDescription" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="SSLDescription" xml:space="preserve">
    <value>SSL</value>
  </data>
  <data name="SSL" xml:space="preserve">
    <value>SSL</value>
  </data>
  <data name="SslModeDescription" xml:space="preserve">
    <value>SSL Mode</value>
  </data>
  <data name="SslMode" xml:space="preserve">
    <value>SSL Mode</value>
  </data>
  <data name="TimeoutDescription" xml:space="preserve">
    <value>Timeout</value>
  </data>
  <data name="Timeout" xml:space="preserve">
    <value>Timeout</value>
  </data>
  <data name="SearchPathDescription" xml:space="preserve">
    <value>SearchPath</value>
  </data>
  <data name="SearchPath" xml:space="preserve">
    <value>SearchPath</value>
  </data>
  <data name="PoolingDescription" xml:space="preserve">
    <value>Pooling</value>
  </data>
  <data name="Pooling" xml:space="preserve">
    <value>Pooling</value>
  </data>
  <data name="ConnectionLifeTimeDescription" xml:space="preserve">
    <value>ConnectionLifeTime</value>
  </data>
  <data name="ConnectionLifeTime" xml:space="preserve">
    <value>ConnectionLifeTime</value>
  </data>
  <data name="MinPoolSizeDescription" xml:space="preserve">
    <value>MinPoolSize</value>
  </data>
  <data name="MinPoolSize" xml:space="preserve">
    <value>MinPoolSize</value>
  </data>
  <data name="MaxPoolSizeDescription" xml:space="preserve">
    <value>MaxPoolSize</value>
  </data>
  <data name="MaxPoolSize" xml:space="preserve">
    <value>MaxPoolSize</value>
  </data>
  <data name="SyncNotificationDescription" xml:space="preserve">
    <value>SyncNotification</value>
  </data>
  <data name="SyncNotification" xml:space="preserve">
    <value>SyncNotification</value>
  </data>
  <data name="CommandTimeoutDescription" xml:space="preserve">
    <value>CommandTimeout</value>
  </data>
  <data name="CommandTimeout" xml:space="preserve">
    <value>CommandTimeout</value>
  </data>
  <data name="EnlistDescription" xml:space="preserve">
    <value>Enlist</value>
  </data>
  <data name="Enlist" xml:space="preserve">
    <value>Enlist</value>
  </data>
  <data name="PreloadReaderDescription" xml:space="preserve">
    <value>PreloadReader</value>
  </data>
  <data name="PreloadReader" xml:space="preserve">
    <value>PreloadReader</value>
  </data>
  <data name="IntegratedSecurityDescription" xml:space="preserve">
    <value>IntegratedSecurity</value>
  </data>
  <data name="IntegratedSecurity" xml:space="preserve">
    <value>IntegratedSecurity</value>
  </data>
  <data name="CompatibleDescription" xml:space="preserve">
    <value>Npgsql Compatibility</value>
  </data>
  <data name="Compatible" xml:space="preserve">
    <value>Npgsql Compatibility</value>
  </data>
  <data name="ApplicationNameDescription" xml:space="preserve">
    <value>ApplicationName</value>
  </data>
  <data name="ApplicationName" xml:space="preserve">
    <value>ApplicationName</value>
  </data>
  <data name="AuthenticationMethodNotSupported" xml:space="preserve">
    <value>Only AuthenticationClearTextPassword and AuthenticationMD5Password supported for now. Received: {0}</value>
  </data>
  <data name="SslRequestError" xml:space="preserve">
    <value>Ssl connection requested. No Ssl enabled connection from this host is configured.</value>
  </data>
  <data name="DnsLookupTimeout" xml:space="preserve">
    <value>Dns hostname lookup timeout. Increase Timeout value in ConnectionString.</value>
  </data>
  <data name="ConnectionTimeout" xml:space="preserve">
    <value>Connection establishment timeout. Increase Timeout value in ConnectionString.</value>
  </data>
  <data name="ConnectionOrCommandTimeout" xml:space="preserve">
    <value>A timeout has occured. If you were establishing a connection, increase Timeout value in ConnectionString. If you were executing a command, increase the CommandTimeout value in ConnectionString or in your NpgsqlCommand object.</value>
  </data>
  <data name="FailedConnection" xml:space="preserve">
    <value>Failed to establish a connection to '{0}'.</value>
  </data>
  <data name="ImpossibleToCast" xml:space="preserve">
    <value>Can't cast {0} into any valid DbType.</value>
  </data>
  <data name="ParameterTypeIsOnlyArray" xml:space="preserve">
    <value>Cannot set NpgsqlDbType to just Array, Binary-Or with the element type (e.g. Array of Box is NpgsqlDbType.Array | NpgsqlDbType.Box).</value>
  </data>
  <data name="WrongType" xml:space="preserve">
    <value>Can't cast {0} into NpgsqlParameter</value>
  </data>
  <data name="InvalidParameterName" xml:space="preserve">
    <value>Invalid parameter name: {0}</value>
  </data>
  <data name="RowSequentialFieldError" xml:space="preserve">
    <value>Invalid attempt to read from column ordinal '{0}'. With CommandBehavior.SequentialAccess, you may only read from column ordinal '{1}' or greater.</value>
  </data>
  <data name="NoTransaction" xml:space="preserve">
    <value>No transaction in progress.</value>
  </data>
  <data name="SavePointWithSemicolon" xml:space="preserve">
    <value>Savepoint name cannot have semicolon.</value>
  </data>
  <data name="SavePointNotSupported" xml:space="preserve">
    <value>Savepoint is not supported by backend.</value>
  </data>
  <data name="ReadOnlyWriteError" xml:space="preserve">
    <value>The collection is read-only</value>
  </data>
  <data name="MustBeBetweenXAndY" xml:space="preserve">
    <value>{0} must be between {1} and {2}</value>
  </data>
  <data name="NoRowAvailable" xml:space="preserve">
    <value>No row is available</value>
  </data>
  <data name="CannotBeEmpty" xml:space="preserve">
    <value>{0} cannot be empty</value>
  </data>
  <data name="NoResultSetAvailable" xml:space="preserve">
    <value>No resultset is currently being traversed</value>
  </data>
</root>